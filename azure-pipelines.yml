# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'My_SonarQube'
    scannerMode: 'Other'

- task: JavaToolInstaller@0
  inputs:
    versionSpec: '11'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'

- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'install sonar:sonar'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**/*.jar'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

- task: Docker@2
  inputs:
    repository: '$(imageName)'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: '$(Build.BuildId)'

- task: ECRPushImage@1
  inputs:
    awsCredentials: 'Azure_ECR_CI'
    regionName: 'us-east-1'
    imageSource: 'imageid'
    sourceImageId: '$(imageName):$(Build.BuildId)'
    repositoryName: '$(repoName)'
    pushTag: '$(Build.BuildId)'
    forceDockerNamingConventions: true



